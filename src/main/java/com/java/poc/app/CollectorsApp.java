package com.java.poc.app;

import static java.util.stream.Collectors.counting;
import static java.util.stream.Collectors.groupingBy;
import static java.util.stream.Collectors.mapping;
import static java.util.stream.Collectors.maxBy;
import static java.util.stream.Collectors.minBy;
import static java.util.stream.Collectors.summingInt;
import static java.util.stream.Collectors.toSet;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import com.java.poc.dto.Dish;

public class CollectorsApp {

	public enum CaloricLevel { DIET, NORMAL, FAT };
	
	public static void main(String[] args) {
		List<Dish> menu = Arrays.asList(
        		new Dish("pork", false, 800, Dish.Type.MEAT),
        		new Dish("beef", false, 700, Dish.Type.MEAT),
        		new Dish("chicken", false, 400, Dish.Type.MEAT),
        		new Dish("french fries", true, 530, Dish.Type.OTHER),
        		new Dish("rice", true, 350, Dish.Type.OTHER),
        		new Dish("season fruit", true, 120, Dish.Type.OTHER),
        		new Dish("pizza", true, 550, Dish.Type.OTHER),
        		new Dish("prawns", false, 300, Dish.Type.FISH),
        		new Dish("salmon", false, 450, Dish.Type.FISH) 
        		);
		
		System.out.println("#################### Using Collectors framework ####################");
		Comparator<Dish> dishcomparator = Comparator.comparingInt(Dish::getCalories);
		Optional<Dish> values = menu.stream().collect(Collectors.maxBy(dishcomparator));
		System.out.println("Max calorie in the menu : " + values.get().getCalories());
		System.out.println("Min calorie in the menu : " + menu.stream()
																		.collect(minBy(dishcomparator))
																		.get()
																		.getCalories());
		System.out.println("Total claories in the menu : " + menu.stream().collect(summingInt(Dish::getCalories)));
		System.out.println("Grouping Dishes based on dish type : " + menu.stream().collect(groupingBy(Dish::getType)));
		//Classify as â€œdietâ€� all dishes with 400 calories or fewer, 
		//set to â€œnormalâ€� the dishes having between 400 and 700 calories, 
		//and set to â€œfatâ€� the ones with more than 700 calories.
		Map<CaloricLevel, List<Dish>> dishesByCaloricLevel = menu.stream()
																		  .collect(groupingBy(dish -> {
																			  if (dish.getCalories() <= 400)
																					return CaloricLevel.DIET;
																			  else if (dish.getCalories() <= 700)
																					return CaloricLevel.NORMAL;
																			  else
																					return CaloricLevel.FAT;
																		  }));
		System.out.println("Grouping Dishes based on Diet chart : " + dishesByCaloricLevel);
		System.out.println("Multilevel Grouping : " + dishesByCaloricLevel);
		Map<Dish.Type, Map<CaloricLevel,List<Dish>>> dishesByCaloricLevel1 =  menu.stream()
	  																			  .collect(
	  																				   groupingBy(
																				  			Dish::getType,
																							groupingBy(
																								dish -> {
																									if (dish.getCalories() <= 400)
																										return CaloricLevel.DIET;
																									else if (dish.getCalories() <= 700)
																										return CaloricLevel.NORMAL;
																									else
																										return CaloricLevel.FAT;
																								})));
		System.out.println("Multilevel Grouping 2 : " + dishesByCaloricLevel1);
		
		Map<Dish.Type, Long> typesCount = menu.stream().collect(groupingBy(Dish::getType, counting()));
		
		System.out.println("Multilevel Grouping 3 : " + typesCount);
		
		//find the highest-calorie dish in the menu by Type
		Map<Dish.Type, Optional<Dish>> highCalDshByTyp = menu.stream().collect(groupingBy(
																					Dish::getType,
																					maxBy(Comparator.comparingInt(Dish::getCalories))
																					));
		
		System.out.println("Find the highest-calorie dish in the menu by Type : " + highCalDshByTyp);
		//Yet another collector, commonly used in conjunction with groupingBy, is one generated by the mapping method.
		Map<Dish.Type, Set<CaloricLevel>> caloricLevelsByType =menu.stream().collect(
																			groupingBy(
																					Dish::getType, 
																					mapping(
																						dish -> { 
																							if (dish.getCalories() <= 400) 
																								return CaloricLevel.DIET;
																							else if (dish.getCalories() <= 700) 
																								return CaloricLevel.NORMAL;
																							else 
																								return CaloricLevel.FAT; },
																					toSet() )));
		System.out.println("Grouping 4 : " + caloricLevelsByType);
	}

}
